# -*- coding: utf-8 -*-

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import datetime

starttime = datetime.datetime.now()

# pd.set_option('display.height',1000)
pd.set_option('display.width',1000)
pd.set_option('display.max_rows',500)
pd.set_option('display.max_columns',500)

'''
# ========== plot The every timeslot accuracy
fig = plt.figure(figsize=(12,8))
x = np.linspace(5,24,38)
# 1W
y1 = [0.9995917811947204, 0.9987753435841611, 0.9908831133487549, 0.9725132671111716, 0.9364539393114709, 0.8682813988297727, 0.7632330929378147, 0.6787318002449313, 0.6240304803374609, 0.572322765002041, 0.5112260171451898, 0.46360048986256636, 0.4191046400870867, 0.3864471356647163, 0.3633147366988706, 0.3426316505647027, 0.3320179616274323, 0.32371751258674647, 0.3156892094162471, 0.2910600081643761, 0.2759559123690298, 0.2647979316913866, 0.25051027350659955, 0.24193767859572732, 0.2530956592733705, 0.2901074976187236, 0.3429037964348891, 0.412845285072799, 0.47897673152809905, 0.5271465505510954, 0.5558579398557627, 0.5804871411076337, 0.6093346033473942, 0.6459382228874677, 0.6811811130766091, 0.7319363178663764, 0.7675874268607974, 0.773166417199619]
# y2 = [0.9554455445544554, 0.9554455445544554, 0.9306930693069307, 0.9306930693069307, 0.8465346534653465, 0.8514851485148515, 0.6138613861386139, 0.5792079207920792, 0.41089108910891087, 0.3910891089108911, 0.33663366336633666, 0.3415841584158416, 0.26732673267326734, 0.2376237623762376, 0.24257425742574257, 0.21782178217821782, 0.1782178217821782, 0.15346534653465346, 0.15346534653465346, 0.1485148514851485, 0.12871287128712872, 0.15346534653465346, 0.16336633663366337, 0.2079207920792079, 0.21782178217821782, 0.24752475247524752, 0.29207920792079206, 0.3316831683168317, 0.43564356435643564, 0.5099009900990099, 0.5693069306930693, 0.6287128712871287, 0.6782178217821783, 0.7425742574257426, 0.8168316831683168, 0.8960396039603961, 0.9356435643564357, 0.9455445544554455]
# 10W
# y1 = [0.9996740459052017, 0.9981257639549097, 0.9918511476300421, 0.9746434877088144, 0.9388157001222328, 0.8693195708271085, 0.7663588211326905, 0.6752953958984109, 0.6292679614287654, 0.5684231970664132, 0.505351079722939, 0.4604237403232378, 0.42336004346054595, 0.3906016569333152, 0.36327583865272306, 0.3418986826022002, 0.33051745212549233, 0.32042645660736113, 0.30882792340078774, 0.2901263072117343, 0.27696591063425235, 0.26062746163248673, 0.2510525600977862, 0.24164063561048485, 0.2572728507401874, 0.28625560233600433, 0.3404047263343746, 0.41457286432160806, 0.4789487980442754, 0.536180904522613, 0.5654081216895287, 0.587342115985332, 0.6118429987776721, 0.6385712345511341, 0.6779166100774141, 0.7233736248811625, 0.75806057313595, 0.7668749151161212]
# y2 = [0.9413037290065471, 0.9405636208368916, 0.9172217477939083, 0.9140905209222886, 0.8245943637916311, 0.8134358098491318, 0.622203245089667, 0.5980074010816966, 0.45288926843154, 0.4292058070025619, 0.3387987475092514, 0.3107884998576715, 0.25271847423854255, 0.22322801024765157, 0.18411614005123825, 0.16669513236549957, 0.14335325932251636, 0.1363506974096214, 0.12980358667805295, 0.13105607742670083, 0.1345288926843154, 0.14506120125249075, 0.16048961001992598, 0.1830344434955878, 0.20927981781952748, 0.24543125533731852, 0.29564474807856533, 0.35485340165101054, 0.434044975804156, 0.49962994591517224, 0.567492171932821, 0.62732707087959, 0.6843153999430686, 0.7508112724167378, 0.8119555935098207, 0.866268146883006, 0.9160831198405921, 0.9350982066609735]

plt.plot(x,y1,linewidth = 2,color = 'r',label = 'commuter',marker = 'o',markerfacecolor = 'k',markersize = 5)
# plt.plot(x,y2,linewidth = 2,color = 'b',label = 'non-commuter',marker = 'o',markerfacecolor = 'k',markersize = 5)

plt.xlim(5,24)
plt.xticks(range(5,24,1))
plt.xlabel(r'Departure time, t[h]', fontsize=12)
plt.ylabel(r'Accuracy Rate', fontsize=12)
# for a, b in zip(x, y1):
#     plt.text(a, b, b, ha='center', va='bottom', fontsize=10)
plt.legend()
plt.tight_layout()
plt.savefig(r'G:\Program\Pycharm Projects\File of Python3\SCD_System\result\metro_trip_accuracy_everyTS.png', dpi=150)
# ==========
'''

# ========== plot station flow fractions of prediction
# 1W
# tripCount_Prediction = [0.004874947011445528, 0.013565069944891903, 0.06464603645612547, 0.10491733785502332, 0.07821110640101737, 0.07312420517168292, 0.04599406528189911, 0.05998304366256889, 0.055955913522679104, 0.05086901229334464, 0.029461636286562103, 0.051080966511233575, 0.06761339550657058, 0.09453158117846545, 0.07079270877490462, 0.052988554472233995, 0.046841882153454854, 0.0317931326833404, 0.002755404832556168]
# tripCount_True = [0.00040584415584415587, 0.01278409090909091, 0.044439935064935064, 0.10186688311688312, 0.07609577922077922, 0.04991883116883117, 0.044439935064935064, 0.05113636363636364, 0.05093344155844156, 0.05154220779220779, 0.060064935064935064, 0.05905032467532467, 0.09050324675324675, 0.10693993506493507, 0.06615259740259741, 0.04667207792207792, 0.04991883116883117, 0.030844155844155844, 0.006290584415584416]
# 10W
tripCount_Prediction = [0.005885347724264332, 0.01276855717340393, 0.06260054984217493, 0.101232053762346, 0.07060380816617452, 0.06490174116688728, 0.043457896344567766, 0.05400672029324916, 0.05722431524284696, 0.051379696568577535, 0.043376438244577945, 0.06321148559209856, 0.08406475918949191, 0.09882903981264637, 0.06284492414214439, 0.04954688931880664, 0.04549434884431321, 0.026025862946746768, 0.002545565624681804]
tripCount_True = [0.000980310362089104, 0.011805439679626231, 0.047221758718504925, 0.10239028867011514, 0.07681878858668446, 0.051914733856165525, 0.0472843317203404, 0.051893876188887036, 0.05283247121641915, 0.05387535458034373, 0.055314533622559656, 0.06290672451193059, 0.08626731186384115, 0.09871933922910062, 0.06841314867345236, 0.04903637577173369, 0.0470340397129985, 0.030285332888369765, 0.005005840146837978]
print(tripCount_Prediction)
print(tripCount_True)

plt.figure(figsize=(6,3))
x = np.linspace(5,24,19)
plt.plot(x,tripCount_Prediction,label = 'Prediction')
plt.plot(x,tripCount_True,label = 'True')

plt.xlim(5,24)
plt.xticks(range(5,24,1))
plt.xlabel(r'Departure time, t[h]', fontsize=12)
plt.ylabel(r'Fractions of departures, P', fontsize=12)
plt.legend()
plt.tight_layout()
plt.savefig(r'G:\Program\Pycharm Projects\File of Python3\SCD_System\result\Station Flow Fractions of Prediction.png', dpi=150)
# ==========


# ========== plot flow of prediction
# 1W
# numPrediction_ls3 = [23.0, 64.0, 305.0, 495.0, 369.0, 345.0, 217.0, 283.0, 264.0, 240.0, 201.0, 313.0, 378.0, 511.0, 334.0, 250.0, 221.0, 150.0, 13.0]
# numTrueState_ls3 = [3.0, 61.0, 241.0, 509.0, 408.0, 266.0, 252.0, 237.0, 249.0, 230.0, 278.0, 292.0, 431.0, 488.0, 326.0, 249.0, 257.0, 156.0, 30.0]
# 10W
numPrediction_ls3 = [289.0, 627.0, 3074.0, 4971.0, 3467.0, 3187.0, 2134.0, 2652.0, 2810.0, 2523.0, 2130.0, 3104.0, 4128.0, 4853.0, 3086.0, 2433.0, 2234.0, 1278.0, 125.0]
numTrueState_ls3 = [47.0, 566.0, 2264.0, 4909.0, 3683.0, 2489.0, 2267.0, 2488.0, 2533.0, 2583.0, 2652.0, 3016.0, 4136.0, 4733.0, 3280.0, 2351.0, 2255.0, 1452.0, 240.0]

print(numPrediction_ls3)
print(numTrueState_ls3)

plt.figure(figsize=(6,3))
x = np.linspace(5,24,19)
plt.plot(x, numPrediction_ls3, label ='Prediction')
plt.plot(x, numTrueState_ls3, label ='True')

plt.xlim(5,24)
plt.xticks(range(5,24,1))
plt.xlabel(r'Departure time, t[h]', fontsize=12)
plt.ylabel(r'# Flow', fontsize=12)
plt.legend()
plt.tight_layout()
plt.savefig(r'G:\Program\Pycharm Projects\File of Python3\SCD_System\result\Flow of Prediction.png', dpi=150)
# ==========

'''
# ========== plot flow of station
a = [2, 38, 140, 308, 193, 91, 42, 48, 27, 19, 20, 33, 51, 45, 26, 28, 16, 11, 0]
b = [1, 12, 39, 54, 19, 11, 16, 23, 14, 16, 36, 72, 130, 257, 181, 96, 88, 88, 13]
c = [1, 42, 153, 300, 199, 59, 36, 23, 20, 16, 9, 27, 60, 49, 29, 27, 16, 7, 1]
d = [0, 16, 48, 55, 33, 16, 10, 13, 15, 22, 25, 53, 112, 210, 137, 93, 73, 81, 11]


plt.figure(figsize=(6,3))
x = np.linspace(5,24,19)
plt.plot(x, a, label ='Prediction-IN')
plt.plot(x, b, label ='Prediction-OUT')
plt.plot(x, c, label ='True-IN')
plt.plot(x, d, label ='True-OUT')


plt.xlim(5,24)
plt.xticks(range(5,24,1))
plt.xlabel(r'Departure time, t[h]', fontsize=12)
plt.ylabel(r'# Flow', fontsize=12)
plt.legend()
plt.tight_layout()
plt.savefig(r'G:\Program\Pycharm Projects\File of Python3\SCD_System\result\Flow of Station-111.png', dpi=150)
# ==========
'''

plt.show()
plt.close()